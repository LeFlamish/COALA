Index: app/src/main/res/layout/content_edit_problem_info.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\"\r\n        android:paddingTop=\"100dp\"\r\n        android:paddingLeft=\"30dp\"\r\n        android:paddingRight=\"30dp\" >\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"문제번호\"\r\n                android:textColor=\"@color/black\"/>\r\n            <EditText\r\n                android:id=\"@+id/problemNum\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:textColor=\"@color/black\"\r\n                android:backgroundTint=\"@color/gray\"/>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"제목\"\r\n                android:textColor=\"@color/black\"/>\r\n            <EditText\r\n                android:id=\"@+id/problemTitle\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:textColor=\"@color/black\"\r\n                android:backgroundTint=\"@color/gray\"/>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"난이도\"\r\n                android:textColor=\"@color/black\"/>\r\n            <Spinner\r\n                android:id=\"@+id/difficultySpinner\"\r\n                android:layout_width=\"150dp\"\r\n                android:layout_height=\"60dp\"\r\n                android:textColor=\"@android:color/black\"\r\n                android:entries=\"@array/difficulty_array\"\r\n                android:popupBackground=\"@color/white\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:theme=\"@style/SpinnerTheme\"/>\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"vertical\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"10dp\">\r\n\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"문제 유형\"\r\n                android:textColor=\"@android:color/black\" />\r\n\r\n            <LinearLayout\r\n                android:orientation=\"horizontal\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:weightSum=\"2\" >\r\n\r\n                <LinearLayout\r\n                    android:orientation=\"vertical\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_weight=\"1\" >\r\n\r\n                    <!-- 첫 번째 열 체크박스 -->\r\n                    <CheckBox\r\n                        android:id=\"@+id/bruteforce\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"브루트포스 알고리즘\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/BFS\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"BFS\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/DFS\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"DFS\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/DP\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"DP\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/backtracking\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"백트래킹\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/queue\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"큐\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/stack\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"스택\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/math\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"수학\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/realization\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"구현\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <!-- 추가적인 체크박스들... -->\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:orientation=\"vertical\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_weight=\"1\" >\r\n\r\n                    <!-- 두 번째 열 체크박스 -->\r\n                    <CheckBox\r\n                        android:id=\"@+id/greedy\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그리디 알고리즘\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/sort\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"정렬\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/string\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"문자열\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/graphtheory\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그래프 이론\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/graphsearch\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그래프 탐색\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/tree\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"트리\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/simulation\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"시뮬레이션\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/datastructure\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"자료 구조\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/etc\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"기타\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n            <!-- 기타 선택 시 보여질 EditText -->\r\n            <EditText\r\n                android:id=\"@+id/etc_input\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:hint=\"기타 문제 유형을 입력하세요.\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\"\r\n                android:theme=\"@style/CustomEditText\"\r\n                android:visibility=\"gone\"/> <!-- 기본적으로는 숨겨둡니다. -->\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"스스로 해결?\"\r\n                android:textColor=\"@color/black\"/>\r\n            <RadioGroup\r\n                android:id=\"@+id/onmyown\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\"\r\n                android:buttonTint=\"@color/gray\"\r\n                android:textColor=\"@color/black\" >\r\n                <RadioButton\r\n                    android:id=\"@+id/yes\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"네\"\r\n                    android:buttonTint=\"@color/gray\"\r\n                    android:textColor=\"@color/black\"/>\r\n                <RadioButton\r\n                    android:id=\"@+id/no\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"아니오\"\r\n                    android:buttonTint=\"@color/gray\"\r\n                    android:textColor=\"@color/black\"/>\r\n            </RadioGroup>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"메모장\"\r\n                android:textColor=\"@color/black\"/>\r\n            <EditText\r\n                android:id=\"@+id/problemMemo\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:textColor=\"@color/black\"\r\n                android:backgroundTint=\"@color/gray\"/>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:gravity=\"center\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <Button\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"정보 수정\"\r\n                android:background=\"@drawable/rounded_background\"\r\n                android:onClick=\"updateProblem\"\r\n                android:backgroundTint=\"@color/colorPrimary\"/>\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</ScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/content_edit_problem_info.xml b/app/src/main/res/layout/content_edit_problem_info.xml
--- a/app/src/main/res/layout/content_edit_problem_info.xml	(revision 31c26637e9fcd06677ac579642cf45eb798d293d)
+++ b/app/src/main/res/layout/content_edit_problem_info.xml	(date 1718625471668)
@@ -296,14 +296,15 @@
             android:orientation="horizontal"
             android:gravity="center"
             android:layout_width="match_parent"
-            android:layout_height="wrap_content" >
+            android:layout_height="wrap_content"
+            android:paddingBottom="20dp">
             <Button
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:text="정보 수정"
                 android:background="@drawable/rounded_background"
                 android:onClick="updateProblem"
-                android:backgroundTint="@color/colorPrimary"/>
+                android:backgroundTint="@color/colorPrimary" />
         </LinearLayout>
     </LinearLayout>
 </ScrollView>
\ No newline at end of file
Index: app/src/main/java/com/example/smobileeapp/AnswerDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smobileeapp;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.google.firebase.database.ChildEventListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.MutableData;\r\nimport com.google.firebase.database.Transaction;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class AnswerDetailActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"AnswerDetailActivity\";\r\n\r\n    private DatabaseReference mDatabase;\r\n    private String answerId;\r\n    private String questionId;\r\n    private String userIdToken;\r\n    private int problemNum;\r\n\r\n    private TextView answerDetailTextView;\r\n    private EditText replyEditText;\r\n    private ListView repliesListView;\r\n    private List<Reply> repliesList;\r\n    private ReplyAdapter replyAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_answer_detail);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        if (getSupportActionBar() != null) {\r\n            getSupportActionBar().setTitle(\"답변 상세 보기\");\r\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            Window window = getWindow();\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\r\n            window.setStatusBarColor(ContextCompat.getColor(this, R.color.colorPrimary));\r\n        }\r\n\r\n        replyEditText = findViewById(R.id.replyEditText);\r\n        repliesListView = findViewById(R.id.repliesListView);\r\n\r\n        repliesList = new ArrayList<>();\r\n        replyAdapter = new ReplyAdapter(this, repliesList);\r\n        repliesListView.setAdapter(replyAdapter);\r\n\r\n        Intent intent = getIntent();\r\n        answerId = intent.getStringExtra(\"answerId\");\r\n        questionId = intent.getStringExtra(\"questionId\");\r\n        userIdToken = intent.getStringExtra(\"userIdToken\");\r\n        problemNum = intent.getIntExtra(\"problemNum\", -1);\r\n\r\n        Log.d(TAG, \"onCreate: answerId=\" + answerId + \", questionId=\" + questionId + \", userIdToken=\" + userIdToken + \", problemNum=\" + problemNum);\r\n\r\n        if (answerId == null || questionId == null || userIdToken == null || problemNum == -1) {\r\n            Toast.makeText(this, \"데이터를 가져오는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            finish();\r\n            return;\r\n        }\r\n\r\n        mDatabase = FirebaseDatabase.getInstance().getReference();\r\n        answerDetailTextView = findViewById(R.id.answerDetailTextView);\r\n\r\n        // 초기에 답변 및 답글 로드\r\n        loadAnswerDetail();\r\n        loadReplies(); // 이 부분을 추가합니다.\r\n\r\n        repliesListView.setOnItemClickListener((parent, view, position, id) -> {\r\n            Reply selectedReply = repliesList.get(position);\r\n            Intent replyDetailIntent = new Intent(AnswerDetailActivity.this, ReplyDetailActivity.class);\r\n            replyDetailIntent.putExtra(\"replyIdToken\", selectedReply.getReplyIdToken());\r\n            replyDetailIntent.putExtra(\"questionId\", questionId);\r\n            replyDetailIntent.putExtra(\"userIdToken\", userIdToken);\r\n            replyDetailIntent.putExtra(\"problemNum\", problemNum);\r\n            replyDetailIntent.putExtra(\"answerId\", answerId);\r\n            startActivity(replyDetailIntent);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_answer_detail, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        int id = item.getItemId();\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n          onBackPressed();\r\n            return true;\r\n        } else if (id == R.id.action_settings15) {\r\n            DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\").child(answerId);\r\n            questionRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        Answer existingAnswer = dataSnapshot.getValue(Answer.class);\r\n                        if (existingAnswer != null && existingAnswer.getUserIdToken().equals(userIdToken)) {\r\n                            Intent it = new Intent(AnswerDetailActivity.this, EditAnswer.class);\r\n                            it.putExtra(\"userIdToken\", userIdToken);\r\n                            it.putExtra(\"problemNum\", problemNum);\r\n                            it.putExtra(\"questionId\", questionId);\r\n                            it.putExtra(\"answerId\", answerId);\r\n                            startActivity(it);\r\n                            finish();\r\n                        } else {\r\n                            Toast.makeText(AnswerDetailActivity.this, \"작성자만 답변을 수정할 수 있습니다.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(AnswerDetailActivity.this, \"답변을 찾을 수 없습니다.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                    Toast.makeText(AnswerDetailActivity.this, \"Failed to load question data: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n            return true;\r\n        } else if (id == R.id.action_settings16) {\r\n            DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\").child(answerId);\r\n            questionRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        Answer existingAnswer = dataSnapshot.getValue(Answer.class);\r\n                        if (existingAnswer != null && existingAnswer.getUserIdToken().equals(userIdToken)) {\r\n                            deleteAnswer();\r\n                        } else {\r\n                            Toast.makeText(AnswerDetailActivity.this, \"작성자만 답변을 삭제할 수 있습니다.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(AnswerDetailActivity.this, \"답변을 찾을 수 없습니다.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                    Toast.makeText(AnswerDetailActivity.this, \"Failed to load question data: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        loadAnswerDetail();\r\n        loadReplies();\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        Log.d(\"555\",\"back555\");\r\n        onBackPressed();\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        Log.d(\"444\",\"back444\");\r\n        super.onBackPressed();\r\n        Intent intent = new Intent(AnswerDetailActivity.this, QuestionDetailActivity.class);\r\n        intent.putExtra(\"userIdToken\", userIdToken);\r\n        intent.putExtra(\"problemNum\", problemNum);\r\n        intent.putExtra(\"questionId\", questionId);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void deleteAnswer() {\r\n        DatabaseReference answerRef = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId);\r\n\r\n        DatabaseReference replyRef = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId)\r\n                .child(\"replies\");\r\n\r\n        // 먼저 모든 댓글을 삭제합니다.\r\n        replyRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    snapshot.getRef().removeValue(); // 각 댓글에 대해 삭제 진행\r\n                }\r\n\r\n                decrementAnswerCount();\r\n\r\n                // replyCount 필드를 null로 설정하여 삭제합니다.\r\n                answerRef.child(\"replyCount\").setValue(null).addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        // replyCount 필드가 성공적으로 삭제된 후에 답변을 삭제합니다.\r\n                        answerRef.removeValue().addOnCompleteListener(task1 -> {\r\n                            if (task1.isSuccessful()) {\r\n                                // 삭제가 성공하면 해당 필드들도 함께 삭제합니다.\r\n                                answerRef.child(\"problemNum\").removeValue(); // problemNum 필드 삭제\r\n                                // deleted 필드를 true로 설정하여 삭제된 상태를 나타냅니다.\r\n                                answerRef.child(\"deleted\").setValue(true).addOnCompleteListener(task2 -> {\r\n                                    if (task2.isSuccessful()) {\r\n                                        Toast.makeText(AnswerDetailActivity.this, \"답변이 삭제되었습니다.\", Toast.LENGTH_SHORT).show();\r\n                                        // 삭제 후에는 질문 상세 화면으로 이동합니다.\r\n                                        Intent intent = new Intent(AnswerDetailActivity.this, QuestionDetailActivity.class);\r\n                                        intent.putExtra(\"userIdToken\", userIdToken);\r\n                                        intent.putExtra(\"problemNum\", problemNum);\r\n                                        intent.putExtra(\"questionId\", questionId);\r\n                                        startActivity(intent);\r\n                                        finish();\r\n                                    } else {\r\n                                        Toast.makeText(AnswerDetailActivity.this, \"답변 삭제에 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(AnswerDetailActivity.this, \"Failed to load replies: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void decrementAnswerCount() {\r\n        DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n        questionRef.runTransaction(new Transaction.Handler() {\r\n            @NonNull\r\n            @Override\r\n            public Transaction.Result doTransaction(@NonNull MutableData mutableData) {\r\n                Question question = mutableData.getValue(Question.class);\r\n                if (question == null) {\r\n                    return Transaction.success(mutableData);\r\n                }\r\n\r\n                // 기존 answerCount를 감소시킵니다.\r\n                int newAnswerCount = Math.max(question.getAnswerCount() - 1, 0); // 최소값은 0입니다.\r\n                question.setAnswerCount(newAnswerCount);\r\n\r\n                // 업데이트된 Question 객체를 저장합니다.\r\n                mutableData.setValue(question);\r\n                return Transaction.success(mutableData);\r\n            }\r\n\r\n            @Override\r\n            public void onComplete(@Nullable DatabaseError databaseError, boolean b, @Nullable DataSnapshot dataSnapshot) {\r\n                if (databaseError != null) {\r\n                    Log.e(TAG, \"decrementAnswerCount:onComplete: \", databaseError.toException());\r\n                } else {\r\n                    Log.d(TAG, \"decrementAnswerCount:onComplete: Answer count decremented successfully\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void loadAnswerDetail() {\r\n        DatabaseReference answerRef = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId);\r\n\r\n        answerRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    Answer answer = dataSnapshot.getValue(Answer.class);\r\n                    if (answer != null) {\r\n                        // 답변 텍스트를 표시\r\n                        answerDetailTextView.setText(answer.getAnswerText());\r\n                        answerDetailTextView.setTextColor(getResources().getColor(android.R.color.black));\r\n\r\n                        // 답변에 대한 답글 목록 로드\r\n                        loadReplies();\r\n                    }\r\n                } else {\r\n                    Toast.makeText(AnswerDetailActivity.this, \"답변을 찾을 수 없습니다.\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(AnswerDetailActivity.this, \"Failed to load answer detail: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void submitReply(View view) {\r\n        String replyText = replyEditText.getText().toString().trim();\r\n        if (TextUtils.isEmpty(replyText)) {\r\n            Toast.makeText(this, \"답글을 입력해주세요.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        long currentTime = System.currentTimeMillis();\r\n\r\n        String replyId = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId)\r\n                .child(\"replies\")\r\n                .push().getKey();\r\n\r\n        if (replyId == null) {\r\n            Toast.makeText(this, \"답글을 제출하는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        // Create a new Reply object with replyIdToken\r\n        Reply reply = new Reply(replyText, currentTime, userIdToken, replyId);\r\n\r\n        // Save the Reply object to the database\r\n        mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId)\r\n                .child(\"replies\")\r\n                .child(replyId)\r\n                .setValue(reply)\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        Toast.makeText(this, \"답글이 제출되었습니다.\", Toast.LENGTH_SHORT).show();\r\n                        replyEditText.setText(\"\");\r\n                        // 답글 제출 후에는 loadReplies()를 호출하여 새로운 답글을 가져오도록 수정\r\n                        loadReplies();\r\n                    } else {\r\n                        Toast.makeText(this, \"답글을 제출하는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void loadReplies() {\r\n        DatabaseReference replyRef = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId)\r\n                .child(\"replies\");\r\n\r\n        replyRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                repliesList.clear(); // Clear existing data\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    Reply reply = snapshot.getValue(Reply.class);\r\n                    if (reply != null) {\r\n                        repliesList.add(reply);\r\n                    }\r\n                }\r\n                replyAdapter.notifyDataSetChanged();\r\n                // 댓글이 추가될 때마다 답변의 댓글 개수 필드를 업데이트\r\n                updateReplyCount(repliesList.size());\r\n                Log.d(TAG, \"loadReplies:onDataChange: repliesList size=\" + repliesList.size());\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Log.d(TAG, \"loadReplies:onCancelled\", databaseError.toException());\r\n                Toast.makeText(AnswerDetailActivity.this, \"Failed to load replies.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void updateReplyCount(int count) {\r\n        mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\")\r\n                .child(answerId)\r\n                .child(\"replyCount\")\r\n                .setValue(count)\r\n                .addOnSuccessListener(aVoid -> Log.d(TAG, \"updateReplyCount: Reply count updated successfully\"))\r\n                .addOnFailureListener(e -> Log.e(TAG, \"updateReplyCount: Failed to update Reply count\", e));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/smobileeapp/AnswerDetailActivity.java b/app/src/main/java/com/example/smobileeapp/AnswerDetailActivity.java
--- a/app/src/main/java/com/example/smobileeapp/AnswerDetailActivity.java	(revision 31c26637e9fcd06677ac579642cf45eb798d293d)
+++ b/app/src/main/java/com/example/smobileeapp/AnswerDetailActivity.java	(date 1718624936125)
@@ -335,6 +335,9 @@
             return;
         }
 
+        // 버튼을 비활성화합니다.
+        view.setEnabled(false);
+
         long currentTime = System.currentTimeMillis();
 
         String replyId = mDatabase.child("QuestionBulletin")
@@ -347,6 +350,8 @@
 
         if (replyId == null) {
             Toast.makeText(this, "답글을 제출하는 데 실패했습니다.", Toast.LENGTH_SHORT).show();
+            // 버튼을 다시 활성화합니다.
+            view.setEnabled(true);
             return;
         }
 
@@ -371,6 +376,8 @@
                     } else {
                         Toast.makeText(this, "답글을 제출하는 데 실패했습니다.", Toast.LENGTH_SHORT).show();
                     }
+                    // 버튼을 다시 활성화합니다.
+                    view.setEnabled(true);
                 });
     }
 
Index: app/src/main/res/layout/content_edit_question.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"@android:color/white\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\"\r\n        android:paddingTop=\"100dp\"\r\n        android:paddingLeft=\"30dp\"\r\n        android:paddingRight=\"30dp\" >\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"문제번호\"\r\n                android:textColor=\"@android:color/black\" />\r\n            <EditText\r\n                android:id=\"@+id/problemNum\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\"/>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"제목\"\r\n                android:textColor=\"@android:color/black\"/>\r\n            <EditText\r\n                android:id=\"@+id/problemTitle\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\"  />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:gravity=\"center\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <Button\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"제목 자동 입력\"\r\n                android:background=\"@drawable/rounded_background\"\r\n                android:onClick=\"autoTitle\"\r\n                android:backgroundTint=\"@color/colorPrimary\"\r\n                android:textColor=\"@android:color/white\"/>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"난이도\"\r\n                android:textColor=\"@android:color/black\" />\r\n            <Spinner\r\n                android:id=\"@+id/difficultySpinner\"\r\n                android:layout_width=\"150dp\"\r\n                android:layout_height=\"60dp\"\r\n                android:textColor=\"@android:color/black\"\r\n                android:entries=\"@array/difficulty_array\"\r\n                android:popupBackground=\"@color/white\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:theme=\"@style/SpinnerTheme\"/>\r\n\r\n        </LinearLayout>\r\n\r\n        <TextView\r\n            android:layout_width=\"60sp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"문제 유형\"\r\n            android:textColor=\"@android:color/black\" />\r\n\r\n        <LinearLayout\r\n            android:orientation=\"vertical\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"10dp\">\r\n\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"문제 유형\"\r\n                android:textColor=\"@android:color/black\" />\r\n\r\n            <LinearLayout\r\n                android:orientation=\"horizontal\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:weightSum=\"2\" >\r\n\r\n                <LinearLayout\r\n                    android:orientation=\"vertical\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_weight=\"1\" >\r\n\r\n                    <!-- 첫 번째 열 체크박스 -->\r\n                    <CheckBox\r\n                        android:id=\"@+id/bruteforce\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"브루트포스 알고리즘\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/BFS\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"BFS\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/DFS\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"DFS\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/DP\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"DP\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/backtracking\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"백트래킹\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/queue\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"큐\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/stack\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"스택\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/math\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"수학\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/realization\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"구현\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <!-- 추가적인 체크박스들... -->\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:orientation=\"vertical\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_weight=\"1\" >\r\n\r\n                    <!-- 두 번째 열 체크박스 -->\r\n                    <CheckBox\r\n                        android:id=\"@+id/greedy\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그리디 알고리즘\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/sort\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"정렬\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/string\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"문자열\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/graphtheory\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그래프 이론\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/graphsearch\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"그래프 탐색\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/tree\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"트리\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/simulation\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"시뮬레이션\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n                    <CheckBox\r\n                        android:id=\"@+id/datastructure\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"자료 구조\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/etc\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"기타\"\r\n                        android:buttonTint=\"@color/gray\"\r\n                        android:textColor=\"@android:color/black\" />\r\n\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n            <!-- 기타 선택 시 보여질 EditText -->\r\n            <EditText\r\n                android:id=\"@+id/etc_input\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:hint=\"기타 문제 유형을 입력하세요.\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\"\r\n                android:theme=\"@style/CustomEditText\"\r\n                android:visibility=\"gone\"/> <!-- 기본적으로는 숨겨둡니다. -->\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"질문 제목\"\r\n                android:textColor=\"@android:color/black\" />\r\n            <EditText\r\n                android:id=\"@+id/questionTitle\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\" />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n            <TextView\r\n                android:layout_width=\"60sp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"질문 내용\"\r\n                android:textColor=\"@android:color/black\"/>\r\n            <EditText\r\n                android:id=\"@+id/questionText\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:backgroundTint=\"@color/gray\"\r\n                android:textColor=\"@android:color/black\" />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:orientation=\"horizontal\"\r\n            android:gravity=\"center\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" >\r\n            <Button\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:background=\"@drawable/rounded_background\"\r\n                android:text=\"수정 완료\"\r\n                android:onClick=\"updateQuestion\"\r\n                android:backgroundTint=\"@color/colorPrimary\"/>\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</ScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/content_edit_question.xml b/app/src/main/res/layout/content_edit_question.xml
--- a/app/src/main/res/layout/content_edit_question.xml	(revision 31c26637e9fcd06677ac579642cf45eb798d293d)
+++ b/app/src/main/res/layout/content_edit_question.xml	(date 1718625513771)
@@ -303,7 +303,8 @@
             android:orientation="horizontal"
             android:gravity="center"
             android:layout_width="match_parent"
-            android:layout_height="wrap_content" >
+            android:layout_height="wrap_content"
+            android:paddingBottom="20dp">
             <Button
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
Index: app/src/main/java/com/example/smobileeapp/QuestionDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smobileeapp;\r\n\r\nimport static android.content.ContentValues.TAG;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.ChildEventListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.MutableData;\r\nimport com.google.firebase.database.Transaction;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class QuestionDetailActivity extends AppCompatActivity {\r\n    private FirebaseAuth mAuth;\r\n    private DatabaseReference mDatabase;\r\n    private String userIdToken;\r\n    private String questionId;\r\n    private int problemNum;\r\n\r\n    private EditText answerEditText;\r\n    private ListView answersListView;\r\n    private AnswerAdapter answerAdapter;\r\n    private List<Answer> answerList;\r\n    private TextView questionTitleTextView;\r\n    private TextView questionTextView;\r\n    private TextView problemTitleTextView;\r\n    private TextView problemNumTextView;\r\n    private TextView problemDifficultyTextView;\r\n    private TextView problemTypeTextView;\r\n\r\n    private ChildEventListener answersListener;\r\n    private ValueEventListener questionListener;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_question_detail);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        if (getSupportActionBar() != null) {\r\n            getSupportActionBar().setTitle(\"질문 상세 보기\");\r\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true); // 뒤로가기 버튼 표시\r\n        }\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        Intent intent = getIntent();\r\n        userIdToken = mAuth.getCurrentUser().getUid();\r\n        questionId = intent.getStringExtra(\"questionId\");\r\n        problemNum = intent.getIntExtra(\"problemNum\", -1);\r\n\r\n        if (userIdToken == null || questionId == null || problemNum == -1) {\r\n            Toast.makeText(this, \"데이터를 가져오는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            finish();\r\n            return;\r\n        }\r\n\r\n        mDatabase = FirebaseDatabase.getInstance().getReference();\r\n\r\n        answerEditText = findViewById(R.id.answerEditText);\r\n        answersListView = findViewById(R.id.answersListView);\r\n\r\n        answerList = new ArrayList<>();\r\n        answerAdapter = new AnswerAdapter(this, answerList);\r\n        answersListView.setAdapter(answerAdapter);\r\n\r\n        problemNumTextView = findViewById(R.id.problemNum);\r\n        problemTitleTextView = findViewById(R.id.problemTitle);\r\n        problemDifficultyTextView = findViewById(R.id.problemDifficulty);\r\n        problemTypeTextView = findViewById(R.id.problemType);\r\n        questionTitleTextView = findViewById(R.id.questionTitle);\r\n        questionTextView = findViewById(R.id.questionText);\r\n\r\n\r\n        displayQuestion();\r\n        loadAnswers();\r\n        checkAndDeleteAnswers();\r\n\r\n        answersListView.setOnItemClickListener((parent, view, position, id) -> {\r\n            Answer selectedAnswer = answerList.get(position);\r\n            Intent answerDetailIntent = new Intent(QuestionDetailActivity.this, AnswerDetailActivity.class);\r\n            answerDetailIntent.putExtra(\"answerId\", selectedAnswer.getAnswerId());\r\n            answerDetailIntent.putExtra(\"questionId\", questionId);\r\n            answerDetailIntent.putExtra(\"userIdToken\", userIdToken);\r\n            answerDetailIntent.putExtra(\"problemNum\", problemNum);\r\n            startActivity(answerDetailIntent);\r\n            finish();\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_question_detail, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        int id = item.getItemId();\r\n        if (item.getItemId() == android.R.id.home) {\r\n            finish(); // 뒤로가기 버튼 클릭 시 액티비티 종료\r\n            return true;\r\n        } else if (id == R.id.action_settings13) {\r\n            DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n            questionRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        Question existingQuestion = dataSnapshot.getValue(Question.class);\r\n                        if (existingQuestion != null && existingQuestion.getUserIdToken().equals(userIdToken)) {\r\n                            Intent it = new Intent(QuestionDetailActivity.this, EditQuestion.class);\r\n                            it.putExtra(\"userIdToken\", userIdToken);\r\n                            it.putExtra(\"problemNum\", problemNum);\r\n                            it.putExtra(\"questionId\", questionId);\r\n                            startActivity(it);\r\n                        } else {\r\n                            Toast.makeText(QuestionDetailActivity.this, \"작성자만 질문을 수정할 수 있습니다.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(QuestionDetailActivity.this, \"질문을 찾을 수 없습니다..\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                    Toast.makeText(QuestionDetailActivity.this, \"Failed to load question data: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n            return true;\r\n        } else if (id == R.id.action_settings14) {\r\n            DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n            questionRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        Question existingQuestion = dataSnapshot.getValue(Question.class);\r\n                        if (existingQuestion != null && existingQuestion.getUserIdToken().equals(userIdToken)) {\r\n                            deleteQuestion();\r\n                        } else {\r\n                            Toast.makeText(QuestionDetailActivity.this, \"작성자만 질문을 삭제할 수 있습니다.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(QuestionDetailActivity.this, \"질문이 존재하지 않습니다.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                    Toast.makeText(QuestionDetailActivity.this, \"Failed to load question data: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    public void submitAnswer(View view) {\r\n        String answerText = answerEditText.getText().toString().trim();\r\n        if (TextUtils.isEmpty(answerText)) {\r\n            Toast.makeText(this, \"답변을 입력해주세요.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        String answerId = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\").push().getKey();\r\n        if (answerId == null) {\r\n            Toast.makeText(this, \"답변을 제출하는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        Answer answer = new Answer(answerId, answerText, userIdToken);\r\n        mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\").child(answerId).setValue(answer)\r\n                .addOnSuccessListener(aVoid -> {\r\n                    // 답변이 제출되면 해당 질문의 answerCount를 증가시킵니다.\r\n                    incrementAnswerCount(); // answerCount를 증가시키는 메서드 호출\r\n                    Toast.makeText(this, \"답변이 제출되었습니다.\", Toast.LENGTH_SHORT).show();\r\n                    answerEditText.setText(\"\");\r\n                    loadAnswers();\r\n                })\r\n                .addOnFailureListener(e -> Toast.makeText(this, \"답변을 제출하는 데 실패했습니다.\", Toast.LENGTH_SHORT).show());\r\n    }\r\n\r\n    private void displayQuestion() {\r\n        DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n\r\n        questionListener = new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    Question question = dataSnapshot.getValue(Question.class);\r\n                    if (question != null) {\r\n                        String questionTitle = question.getQuestionTitle();\r\n                        String questionText = question.getQuestionText();\r\n                        int problemNum = question.getProblemNum();\r\n                        String problemTitle = question.getProblemTitle();\r\n                        String problemDifficulty = question.getProblemTier();\r\n                        String problemType = question.getProblemType();\r\n                        problemNumTextView.setText(String.valueOf(problemNum));\r\n                        problemTitleTextView.setText(problemTitle);\r\n                        problemDifficultyTextView.setText(problemDifficulty);\r\n                        problemTypeTextView.setText(problemType);\r\n                        questionTitleTextView.setText(questionTitle);\r\n                        questionTextView.setText(questionText);\r\n                    }\r\n                } else {\r\n                    //Toast.makeText(QuestionDetailActivity.this, \"질문이 존재하지 않습니다.\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(QuestionDetailActivity.this, \"질문을 불러오는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        };\r\n\r\n        questionRef.addValueEventListener(questionListener);\r\n    }\r\n\r\n    private void loadAnswers() {\r\n        DatabaseReference answersRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\");\r\n\r\n        answersRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                answerList.clear(); // 기존의 답변 리스트를 모두 비웁니다.\r\n\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    Answer answer = snapshot.getValue(Answer.class);\r\n                    if (answer != null) {\r\n                        answerList.add(answer);\r\n                    }\r\n                }\r\n\r\n                answerAdapter.notifyDataSetChanged(); // 어댑터에 변경 사항을 알립니다.\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(QuestionDetailActivity.this, \"Failed to load answers: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void deleteQuestion() {\r\n        DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n        DatabaseReference answersRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\");\r\n\r\n        // Delete all answers first\r\n        answersRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    snapshot.getRef().removeValue();\r\n                }\r\n\r\n                // After all answers are deleted, remove the question\r\n                questionRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        if (dataSnapshot.exists()) {\r\n                            Question question = dataSnapshot.getValue(Question.class);\r\n                            if (question != null && question.getUserIdToken().equals(userIdToken)) {\r\n                                questionRef.removeValue().addOnCompleteListener(task -> {\r\n                                    if (task.isSuccessful()) {\r\n                                        // Set 'deleted' field to true indicating question is deleted\r\n                                        questionRef.child(\"deleted\").setValue(true).addOnCompleteListener(deletionTask -> {\r\n                                            if (deletionTask.isSuccessful()) {\r\n                                                Toast.makeText(QuestionDetailActivity.this, \"질문과 답변이 모두 삭제되었습니다.\", Toast.LENGTH_SHORT).show();\r\n                                                finish();\r\n                                            } else {\r\n                                                Toast.makeText(QuestionDetailActivity.this, \"질문 삭제에 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        Toast.makeText(QuestionDetailActivity.this, \"질문 삭제에 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                        Toast.makeText(QuestionDetailActivity.this, \"질문을 불러오는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(QuestionDetailActivity.this, \"답변을 불러오는 데 실패했습니다.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        // 모든 답변 필드를 확인하고 delete가 true인 경우 삭제를 수행합니다.\r\n        checkAndDeleteAnswers();\r\n        displayQuestion();\r\n    }\r\n\r\n    private void checkAndDeleteAnswers() {\r\n        DatabaseReference answersRef = mDatabase.child(\"QuestionBulletin\")\r\n                .child(String.valueOf(problemNum))\r\n                .child(questionId)\r\n                .child(\"answers\");\r\n\r\n        answersRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    Answer answer = snapshot.getValue(Answer.class);\r\n                    if (answer != null && answer.isDeleted()) {\r\n                        String answerId = snapshot.getKey();\r\n                        if (answerId == null) {\r\n                            continue; // answerId가 null인 경우 루프를 계속\r\n                        }\r\n                        snapshot.getRef().removeValue()\r\n                                .addOnSuccessListener(aVoid -> {\r\n                                    answerList.clear(); // 답변 리스트를 비웁니다.\r\n                                    loadAnswers(); // 답변을 다시 로드합니다.\r\n                                    Toast.makeText(QuestionDetailActivity.this, \"답변이 삭제되었습니다.\", Toast.LENGTH_SHORT).show();\r\n                                })\r\n                                .addOnFailureListener(e -> Toast.makeText(QuestionDetailActivity.this, \"답변 삭제에 실패했습니다.\", Toast.LENGTH_SHORT).show());\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Toast.makeText(QuestionDetailActivity.this, \"Failed to check answers: \" + databaseError.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        // Remove listeners to prevent memory leaks\r\n        if (questionListener != null) {\r\n            DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n            questionRef.removeEventListener(questionListener);\r\n        }\r\n        if (answersListener != null) {\r\n            DatabaseReference answersRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId).child(\"answers\");\r\n            answersRef.removeEventListener(answersListener);\r\n        }\r\n    }\r\n\r\n    private void incrementAnswerCount() {\r\n        DatabaseReference questionRef = mDatabase.child(\"QuestionBulletin\").child(String.valueOf(problemNum)).child(questionId);\r\n        questionRef.runTransaction(new Transaction.Handler() {\r\n            @NonNull\r\n            @Override\r\n            public Transaction.Result doTransaction(@NonNull MutableData mutableData) {\r\n                Question question = mutableData.getValue(Question.class);\r\n                if (question == null) {\r\n                    return Transaction.success(mutableData);\r\n                }\r\n\r\n                // 기존 answerCount를 증가시킵니다.\r\n                question.setAnswerCount(question.getAnswerCount() + 1);\r\n\r\n                // 업데이트된 Question 객체를 저장합니다.\r\n                mutableData.setValue(question);\r\n                return Transaction.success(mutableData);\r\n            }\r\n\r\n            @Override\r\n            public void onComplete(@Nullable DatabaseError databaseError, boolean b, @Nullable DataSnapshot dataSnapshot) {\r\n                if (databaseError != null) {\r\n                    Log.e(TAG, \"incrementAnswerCount:onComplete: \", databaseError.toException());\r\n                } else {\r\n                    Log.d(TAG, \"incrementAnswerCount:onComplete: Answer count incremented successfully\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/smobileeapp/QuestionDetailActivity.java b/app/src/main/java/com/example/smobileeapp/QuestionDetailActivity.java
--- a/app/src/main/java/com/example/smobileeapp/QuestionDetailActivity.java	(revision 31c26637e9fcd06677ac579642cf45eb798d293d)
+++ b/app/src/main/java/com/example/smobileeapp/QuestionDetailActivity.java	(date 1718625040411)
@@ -184,9 +184,14 @@
             return;
         }
 
+        // Disable the submit button to prevent multiple submissions
+        view.setEnabled(false);
+
         String answerId = mDatabase.child("QuestionBulletin").child(String.valueOf(problemNum)).child(questionId).child("answers").push().getKey();
         if (answerId == null) {
             Toast.makeText(this, "답변을 제출하는 데 실패했습니다.", Toast.LENGTH_SHORT).show();
+            // Re-enable the submit button in case of failure
+            view.setEnabled(true);
             return;
         }
 
@@ -198,9 +203,16 @@
                     Toast.makeText(this, "답변이 제출되었습니다.", Toast.LENGTH_SHORT).show();
                     answerEditText.setText("");
                     loadAnswers();
+                    // Re-enable the submit button after successful submission
+                    view.setEnabled(true);
                 })
-                .addOnFailureListener(e -> Toast.makeText(this, "답변을 제출하는 데 실패했습니다.", Toast.LENGTH_SHORT).show());
+                .addOnFailureListener(e -> {
+                    Toast.makeText(this, "답변을 제출하는 데 실패했습니다.", Toast.LENGTH_SHORT).show();
+                    // Re-enable the submit button in case of failure
+                    view.setEnabled(true);
+                });
     }
+
 
     private void displayQuestion() {
         DatabaseReference questionRef = mDatabase.child("QuestionBulletin").child(String.valueOf(problemNum)).child(questionId);
